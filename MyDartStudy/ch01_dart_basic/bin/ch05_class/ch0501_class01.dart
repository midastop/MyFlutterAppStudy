// 객체와 클래스
/* 객체지향 프로그래밍(Object Oriented Programming)은 컴퓨터 프로그램을 설계하는 방법론
 * 중 하나이다. 객채지향은 프로그래밍 대상을 객체라는 기본 단위로 나누고 이들의 상호작용을
 * 코드로 구현하여 완성된 프로그램을 만드는 방식이다. 객체지향 프로그래밍은 이전의 절차지향
 * 프로그래밍 방식에 비해서 프로그램의 변경이 유연하여 소프트웨어 개발과 유지보수를 보다
 * 간편하게 할 수 있다는 장점을 가지고 있다. 이런 이유로 오늘날 기업용 애플리케이션을 만들때
 * 대부분 객체지향을 지원하는 프로그래밍 언어를 사용한다.
 *
 * 객체(Object)란 실세계에 물리적으로 존재하거나 추상적인 것들 중에 속성을 가지고 있고 다른
 * 것과 식별이 가능한 것을 의미한다. 실제 물리적으로 존재하는 것은 우리 눈에 보이는 사람,
 * 컴퓨터, 책, 휴대폰, 자동차, 동물 등을 예로 들 수 있고 추상적인 것들은 실제로는 눈에 보이지
 * 않지만 현실 세계에서 행해지고 있는 것을 의미하며 주문, 강의, 수강 등을 예로 들 수 있다.
 * 객체는 모두 속성(데이터)과 기능(동작)을 가지고 있는데 예를 들면 사람의 속성은 이름, 나이,
 * 성별 등이 있고 기능은 말하다, 먹다, 걷다 등이 있다. 또한 스마트폰은 제조사, 사양, 가격
 * 등의 속성을 가지고 있고 화면을 켠다, 전화를 건다, 메일을 보낸다 등의 기능이 있다.

 * 객체가 가지는 속성과 기능을 클래스(Class)라는 단위로 정의하고 이 클래스를 통해서 여러 개의
 * 객체를 만들어 사용할 수 있다. 이렇게 하나의 클래스를 통해 여러 개의 객체를 만들 수 있어서
 * 클래스를 객체를 찍어내는 틀 또는 객체의 설계도라고 한다. 객체가 가지는 속성(Property)과
 * 기능은 클래스에서는 변수와 함수로 정의하며 객체지향에서 객체 또는 클래스 안에 정의된 함수를
 * 메서드(Method)라고 부른다. 서로 밀접한 관계가 있는 데이터와 기능을 하나의 클래스 안에서
 * 묶어서 사용하면 코드 관리도 편리하고 중복된 코드를 줄일 수 있다는 장점을 가지게 된다.
 **/
/* 클래스는 아래와 같이 class 키워드를 사용해 정의하며 클래스의 이름은 통상적으로 대문자를 사용한다.
 * 이렇게 클래스가 정의되면 클래스는 새로운 테이터 타입이 된다.
 **/
class Player {
  // late는 변수의 초기화를 미루겠다는 의미이다.
  /* 클래스에 정의된 변수를 속성(Property)이라고 부른다.
   **/
  late String name;
  int age = 0;
  late String gender;

  // 클래스에 정의된 함수를 메소드(Method)라고 부른다.
  void hello() {
    print("Hi ~ " + name);
  }
}

void main() {
  /* 클래스의 인스턴스를 생성할 때는 다음과 같이 클래스 타입의 변수를 선언하고 클래스가
   * 가진 생성자를 호출하면 된다. 생성자의 이름은 클래스 이름과 동일해야 하며 클래스를
   * 정의할 때 별도로 생성자를 정의하지 않으면 기본 생성자가 자동으로 만들어진다.
   * 생성자는 클래스의 인스턴스를 생성하는 특수한 목적의 함수이다.
   **/
  Player p1 = Player();

  // 인스턴스의 속성(Property)와 메소드에 접근할 때 닷(.) 연산자를 사용한다.
  p1.name = "홍길동";
  p1.age = 25;
  p1.gender = "남성";

  print("${p1.name}은 ${p1.gender}이며 ${p1.age}살 임");

  /* 클래스(Class), 객체(Object), 인스턴스(Instance)
   * 클래스는 객체의 속성과 기능을 정의해 놓은 설계도이며 이 설계도를 통해서
   * 여러 개의 상품을 대량 생산할 수 있는 것처럼 하나의 클래스를 정의해 놓고
   * 아래와 같이 여러 개의 객체를 생성할 수 있다. 또한 클래스에 정의된 정보를 이용해
   * 여러 개의 객체를 찍어 내듯이 생성할 수 있어서 클래스를 객체의 틀이라고도 한다.
   *
   * 클래스를 통해 메모리에 실제 만들어지는 하나하나의 객체를 클래스의 인스턴스(Instance)라고
   * 부르며 이렇게 클래스를 통해서 객체가 만들어지는 일련에 과정을 인스턴스화(Instantiation)라고 한다.
   * 인스턴스는 클래스를 통해 실제 메모리에 실체화된 객체를 가리키는 용어이다.
   **/
  Player p2 = Player();
}